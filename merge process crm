/*Пример сборки датасета от CRM обновляемого по новым строкам*/


--Вставка всех строк при копировании или добавлении полей, изменении их архитектуры
INSERT INTO
  raiffeisen-owox.CRM.order_tmp (_PARTITIONTIME,ORDER_ID, APP_ID, LEAD_DATE, PRODUCT_LINE, PRODUCT, NTB, GOOGLE_ID, UTM_MEDIUM, UTM_SOURCE, UTM_CAMPAIGN, UTM_CONTENT, UTM_TERM, SEGMENT_REQUEST_LIMIT, SEGMENT_ISSUES_LIMIT, STATUSES, SALE_CH_CODE, PROCESSING_CHANNEL)
SELECT
 TIMESTAMP_TRUNC(LeadDate, DAY) d, leadid e, leadid, LeadDate, PRODUCT_LINE a, PRODUCT_LINE b, NTB , GOOGLE_ID, UTM_MEDIUM, UTM_SOURCE, UTM_CAMPAIGN, UTM_CONTENT, utm_term, segmentRequestLimit, STAT.SEGMENTISSUESLIMIT,[STRUCT(DATE( LeadDate ), STAT.STATUS, STAT.APPROVAL)], STAT.SALE_CH_CODE, STAT.PROCESSING_CHANNEL
  FROM (SELECT * 
FROM `raiffeisen-owox.Orders_CRM.crm_orders_2019_base_d`
WHERE LeadDate > "2020-05-24") CRM
LEFT JOIN (SELECT STAT FROM Orders_CRM.crm_orders_2019_other STAT) ON leadid = STAT.LEADID


--Ежедневный инкремент новых записеей
MERGE raiffeisen-owox.CRM.order_tmp  T
USING ( 
    SELECT * 
    FROM `raiffeisen-owox.Orders_CRM.crm_orders_2019_base_d`
    LEFT JOIN (SELECT STAT FROM `raiffeisen-owox.Orders_CRM.crm_orders_2019_other` STAT) ON leadid = STAT.LEADID  
) S ON T.ORDER_ID = S.leadid AND T._PARTITIONTIME >= '2019-01-01'
WHEN NOT MATCHED  THEN
  INSERT
  (_PARTITIONTIME,ORDER_ID, APP_ID, LEAD_DATE, PRODUCT_LINE, PRODUCT, NTB, GOOGLE_ID, UTM_MEDIUM, UTM_SOURCE, UTM_CAMPAIGN, UTM_CONTENT, UTM_TERM, SEGMENT_REQUEST_LIMIT, SEGMENT_ISSUES_LIMIT, STATUSES, SALE_CH_CODE, PROCESSING_CHANNEL)
  VALUES(TIMESTAMP_TRUNC(LeadDate, DAY), leadid , leadid, LeadDate, PRODUCT_LINE , PRODUCT_LINE , NTB , GOOGLE_ID, UTM_MEDIUM, UTM_SOURCE, UTM_CAMPAIGN, UTM_CONTENT, utm_term, segmentRequestLimit, STAT.SEGMENTISSUESLIMIT,[STRUCT(DATE( LeadDate ), STAT.STATUS, STAT.APPROVAL)], STAT.SALE_CH_CODE, STAT.PROCESSING_CHANNEL)
  
  
--Обновление записей в структурных талицах
MERGE CRM.order_tmp T  
USING (
  SELECT DISTINCT ORDER_ID, STATUS , APPROVAL FROM `raiffeisen-owox.CRM.order_tmp` r, r.STATUSES 
  JOIN (SELECT ST FROM  Orders_CRM.crm_orders_2019_other ST) ON ORDER_ID = ST.LEADID AND ( STATUS <> ST.STATUS OR APPROVAL <> ST.APPROVAL)
  WHERE DATE(_PARTITIONTIME) = "2020-05-25"
) S
ON T.ORDER_ID = S.ORDER_ID AND T._PARTITIONTIME >= '2019-01-01'
WHEN MATCHED THEN
  UPDATE SET STATUSES = ARRAY_CONCAT( STATUSES ,[STRUCT(CURRENT_DATE(), S.STATUS, S.APPROVAL )])
